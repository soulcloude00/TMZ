// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model StockItem {
  id        Int      @id @default(autoincrement())
  name      String
  brand     String
  price     Float
  os        String?
  features  Json     // Store features as JSON
  image     String   @db.Text // Change type to support longer URLs
  images    Json?    // Array of image URLs
  rating    Float
  reviews   Int
  inStock   Boolean  @default(true)
  stockCount Int     @default(0)
  isNew     Boolean  @default(false)
  isHot     Boolean  @default(false)
  type      String   @default("mobile") // 'mobile' or 'accessory'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminUser {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id])
  items       Json     // Stores cart items as JSON
  total       Float
  status      String   @default("pending") // pending, paid, shipped, delivered, cancelled
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  address     Address?
  payment     Payment?
}

model Address {
  id          Int      @id @default(autoincrement())
  orderId     Int      @unique
  order       Order    @relation(fields: [orderId], references: [id])
  street      String
  city        String
  state       String
  zipCode     String
  country     String   @default("India")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id          Int      @id @default(autoincrement())
  orderId     Int      @unique
  order       Order    @relation(fields: [orderId], references: [id])
  amount      Float
  status      String   @default("pending") // pending, completed, failed
  method      String   // credit_card, debit_card, etc.
  cardLast4   String?  // Last 4 digits of card
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
} 